package {{inputs['basepackage']}}.webservices.request;

import android.content.Context;
import {{inputs['basepackage']}}.webservices.AbstractRequest;
import {{inputs['basepackage']}}.webservices.AbstractRequest.HttpMethod;
import {{inputs['basepackage']}}.webservices.result.{{webservice.Name}}Result;

import java.util.HashMap;
import java.util.Map;

public class {{webservice.Name}}Request extends AbstractRequest<{{webservice.Name}}Result> {

% for parameter in webservice.parameters:
	private {{!equ.convert('java', parameter.dataType)}} {{parameter.name}};
% end

	public {{webservice.Name}}Request(Context context) {
		super(context, {{webservice.Name}}Result.class);
	}
 
% for parameter in webservice.parameters:
	public {{!equ.convert('java', parameter.dataType)}} get{{parameter.Name}}() {
		return this.{{parameter.name}};
	}

	public void set{{parameter.Name}}({{!equ.convert('java', parameter.dataType)}} {{parameter.name}}) {
		this.{{parameter.name}} = {{parameter.name}};
	}
% end


	@Override
	public String getPath() {
% if webservice.path.contains_parameter():
		StringBuilder pathBuilder = new StringBuilder();
    % for entry in webservice.path.entries:
		pathBuilder.append("/");
        % if entry.is_parameter:
		pathBuilder.append(this.{{entry.name}});
        % else:
		pathBuilder.append("{{entry.name}}");
        % end 
    % end
		return pathBuilder.toString();
% else:
		return "{{webservice.path}}";
% end
	}

	@Override
	public HttpMethod getHTTPMethod() {
		return HttpMethod.{{webservice.METHOD}};
	}	
	
	@Override
	public Map<String, Object> getVariables() {
		HashMap<String, Object> map = new HashMap<String, Object>();
% for parameter in webservice.parameters:
    % if not parameter.is_in_path:
		map.put("{{parameter.name}}", this.{{parameter.name}});
	% end
% end
		return map;
	}
}

